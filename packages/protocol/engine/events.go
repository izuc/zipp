package engine

import (
	"github.com/izuc/zipp.foundation/core/eventticker"
	"github.com/izuc/zipp.foundation/runtime/event"
	"github.com/izuc/zipp/packages/protocol/engine/clock"
	"github.com/izuc/zipp/packages/protocol/engine/consensus"
	"github.com/izuc/zipp/packages/protocol/engine/eviction"
	"github.com/izuc/zipp/packages/protocol/engine/filter"
	"github.com/izuc/zipp/packages/protocol/engine/ledger"
	"github.com/izuc/zipp/packages/protocol/engine/notarization"
	"github.com/izuc/zipp/packages/protocol/engine/tangle"
	"github.com/izuc/zipp/packages/protocol/models"
)

type Events struct {
	Error          *event.Event1[error]
	BlockProcessed *event.Event1[models.BlockID]

	EvictionState  *eviction.Events
	Filter         *filter.Events
	Ledger         *ledger.Events
	Tangle         *tangle.Events
	Consensus      *consensus.Events
	Clock          *clock.Events
	Notarization   *notarization.Events
	BlockRequester *eventticker.Events[models.BlockID]

	event.Group[Events, *Events]
}

// NewEvents contains the constructor of the Events object (it is generated by a generic factory).
var NewEvents = event.CreateGroupConstructor(func() (newEvents *Events) {
	return &Events{
		Error:          event.New1[error](),
		BlockProcessed: event.New1[models.BlockID](),
		EvictionState:  eviction.NewEvents(),
		Filter:         filter.NewEvents(),
		Ledger:         ledger.NewEvents(),
		Tangle:         tangle.NewEvents(),
		Consensus:      consensus.NewEvents(),
		Clock:          clock.NewEvents(),
		Notarization:   notarization.NewEvents(),
		BlockRequester: eventticker.NewEvents[models.BlockID](),
	}
})
